name: API Smoke Test

on:
  workflow_dispatch:
    inputs:
      baseUrl:
        description: "Base URL to test (default: production)"
        required: false
        default: ""
  schedule:
    # Run daily at 06:30 UTC (07:30 CET / 08:30 CEST)
    - cron: '30 6 * * *'

permissions:
  contents: read

concurrency:
  group: api-smoke-test
  cancel-in-progress: true

env:
  BASE_URL: ${{ github.event.inputs.baseUrl || secrets.SKOLAPP_BASE_URL || 'https://skolapp.se' }}

jobs:
  api-smoke-test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Mask secrets for security
        run: |
          echo "::add-mask::${{ secrets.OPENAI_API_KEY }}"
          echo "::add-mask::${{ secrets.ABLY_SERVER_API_KEY }}"
          echo "::add-mask::${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}"
          echo "::add-mask::${{ secrets.STRIPE_SECRET_KEY }}"

      - name: Test Application Health Endpoint
        run: |
          echo "üè• Testing application health endpoint..."
          echo "URL: $BASE_URL/api/health"
          
          # Test health endpoint with curl
          HEALTH_RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" "$BASE_URL/api/health" || echo "HTTPSTATUS:000")
          HTTP_STATUS=$(echo "$HEALTH_RESPONSE" | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
          HEALTH_BODY=$(echo "$HEALTH_RESPONSE" | sed -E 's/HTTPSTATUS:[0-9]*$//')
          
          echo "HTTP Status: $HTTP_STATUS"
          
          if [ "$HTTP_STATUS" = "200" ]; then
            echo "‚úÖ Health endpoint returned 200 OK"
            echo "Response preview:"
            echo "$HEALTH_BODY" | jq '.' || echo "$HEALTH_BODY"
          elif [ "$HTTP_STATUS" = "503" ]; then
            echo "‚ö†Ô∏è Health endpoint returned 503 (degraded service)"
            echo "Response preview:"
            echo "$HEALTH_BODY" | jq '.' || echo "$HEALTH_BODY"
          else
            echo "‚ùå Health endpoint failed with status $HTTP_STATUS"
            echo "Response: $HEALTH_BODY"
            exit 1
          fi

      - name: Test Individual Service Health
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_PROJECT_ID: ${{ secrets.OPENAI_PROJECT_ID }}
          ABLY_SERVER_API_KEY: ${{ secrets.ABLY_SERVER_API_KEY }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
        run: |
          echo "üîç Testing individual service health..."
          
          # Test core services
          echo "Testing core services:"
          
          # Supabase (required)
          if [ -n "$SUPABASE_SERVICE_ROLE_KEY" ]; then
            if npm run health:supabase; then
              echo "‚úÖ Supabase - Database operational"
            else
              echo "‚ùå Supabase - Database test failed"
              exit 1
            fi
          else
            echo "‚ùå Supabase credentials not configured"
            exit 1
          fi
          
          # Test optional features
          echo ""
          echo "Testing optional features:"
          
          # OpenAI (optional)
          if [ -n "$OPENAI_API_KEY" ]; then
            if npm run health:openai; then
              echo "‚úÖ OpenAI - AI features operational"
            else
              echo "‚ö†Ô∏è OpenAI - AI features test failed"
            fi
          else
            echo "‚ö†Ô∏è OpenAI credentials not configured - AI features disabled"
          fi
          
          # Ably (optional)
          if [ -n "$ABLY_SERVER_API_KEY" ]; then
            if npm run health:ably; then
              echo "‚úÖ Ably - Live Quiz features operational"
            else
              echo "‚ö†Ô∏è Ably - Live Quiz features test failed"
            fi
          else
            echo "‚ö†Ô∏è Ably credentials not configured - Live Quiz features disabled"
          fi
          
          # Stripe (optional)
          if [ -n "$STRIPE_SECRET_KEY" ]; then
            if npm run health:stripe; then
              echo "‚úÖ Stripe - Billing features operational"
            else
              echo "‚ö†Ô∏è Stripe - Billing features test failed"
            fi
          else
            echo "‚ö†Ô∏è Stripe credentials not configured - Billing features disabled"
          fi
          
          # Skolverket (optional - external API)
          echo "‚úÖ Skolverket - Testing external curriculum API..."
          if npm run health:skolverket; then
            echo "‚úÖ Skolverket - Curriculum data accessible"
          else
            echo "‚ö†Ô∏è Skolverket - Curriculum API test failed (non-critical)"
          fi

      - name: Test Critical Endpoints
        run: |
          echo "üéØ Testing critical application endpoints..."
          
          # Test main page
          if curl -s -f "$BASE_URL" > /dev/null; then
            echo "‚úÖ Main page accessible"
          else
            echo "‚ùå Main page not accessible"
            exit 1
          fi
          
          # Test authentication pages
          if curl -s -f "$BASE_URL/auth/login" > /dev/null; then
            echo "‚úÖ Login page accessible"
          else
            echo "‚ùå Login page not accessible"
            exit 1
          fi
          
          # Test API endpoints that don't require auth
          if curl -s -f "$BASE_URL/api/health" > /dev/null; then
            echo "‚úÖ Health API accessible"
          else
            echo "‚ùå Health API not accessible"
            exit 1
          fi

      - name: Generate Report
        if: always()
        run: |
          echo "üìä API Smoke Test Report"
          echo "========================"
          echo ""
          echo "**Test Environment:**"
          echo "- Base URL: $BASE_URL"
          echo "- Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          echo "- Runner: GitHub Actions"
          echo ""
          echo "**Core Services:**"
          echo "- ‚úÖ Application health endpoint"
          echo "- ‚úÖ Database connectivity (Supabase)"
          echo "- ‚úÖ Main application pages"
          echo ""
          echo "**Feature Services:**"
          echo "- AI Features: $([ -n "${{ secrets.OPENAI_API_KEY }}" ] && echo "Configured" || echo "Not configured")"
          echo "- Live Quiz: $([ -n "${{ secrets.ABLY_SERVER_API_KEY }}" ] && echo "Configured" || echo "Not configured")"
          echo "- Billing: $([ -n "${{ secrets.STRIPE_SECRET_KEY }}" ] && echo "Configured" || echo "Not configured")"
          echo ""
          echo "**Result:** $([ $? -eq 0 ] && echo "‚úÖ PASSED" || echo "‚ùå FAILED")"

      - name: Notify on Failure
        if: failure()
        run: |
          echo "üö® API Smoke Test Failed!"
          echo "This indicates potential issues with critical services."
          echo "Please check the logs above for specific failures."
          echo ""
          echo "Common issues:"
          echo "- Database connectivity problems"
          echo "- Invalid API credentials" 
          echo "- Service rate limits or outages"
          echo "- Network connectivity issues"