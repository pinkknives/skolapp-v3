#!/usr/bin/env node

/**
 * ETL script for Swedish curriculum data from Skolverket
 * Fetches, normalizes, chunks, and embeds curriculum content
 * 
 * Usage:
 *   node scripts/etl/skolverket.js --fresh  # Fresh import, clears existing data
 *   node scripts/etl/skolverket.js          # Incremental import
 */

import { createClient } from '@supabase/supabase-js';
import { config } from 'dotenv';
import { readFileSync } from 'fs';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Load environment variables
config({ path: join(__dirname, '../../.env.local') });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('Missing required environment variables: NEXT_PUBLIC_SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

/**
 * Generate embeddings using OpenAI API
 */
async function generateEmbedding(text) {
  const openaiApiKey = process.env.OPENAI_API_KEY;
  
  if (!openaiApiKey) {
    console.warn('OpenAI API key not found, using mock embedding');
    // Return mock embedding for development
    return Array(1536).fill(0).map(() => Math.random() * 2 - 1);
  }

  try {
    const response = await fetch('https://api.openai.com/v1/embeddings', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openaiApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        input: text,
        model: 'text-embedding-3-small'
      }),
    });

    if (!response.ok) {
      throw new Error(`OpenAI API error: ${response.status}`);
    }

    const data = await response.json();
    return data.data[0].embedding;
  } catch (error) {
    console.warn('Failed to generate embedding via OpenAI, using mock:', error.message);
    // Fallback to mock embedding
    return Array(1536).fill(0).map(() => Math.random() * 2 - 1);
  }
}

/**
 * Chunk text into smaller segments for embedding
 */
function chunkText(text, maxTokens = 400) {
  // Simple tokenization estimate: ~4 characters per token for Swedish
  const maxChars = maxTokens * 4;
  const chunks = [];
  
  // Split by paragraphs first
  const paragraphs = text.split(/\n\s*\n/);
  let currentChunk = '';
  let spanStart = 0;
  
  for (const paragraph of paragraphs) {
    if (currentChunk.length + paragraph.length > maxChars && currentChunk.length > 0) {
      // Finalize current chunk
      chunks.push({
        text: currentChunk.trim(),
        spanStart,
        spanEnd: spanStart + currentChunk.length
      });
      
      spanStart += currentChunk.length;
      currentChunk = paragraph;
    } else {
      currentChunk += (currentChunk ? '\n\n' : '') + paragraph;
    }
  }
  
  // Add final chunk
  if (currentChunk.trim()) {
    chunks.push({
      text: currentChunk.trim(),
      spanStart,
      spanEnd: spanStart + currentChunk.length
    });
  }
  
  return chunks;
}

/**
 * Mock Skolverket curriculum data (for MVP without real API)
 */
const mockCurriculumData = {
  subjects: [
    {
      name: 'Matematik',
      code: 'GRGRMAT01',
      coreContent: {
        '1-3': [
          {
            title: 'Tal och algebra',
            body: 'Naturliga tal och deras egenskaper samt hur de kan delas upp och hur de f√∂rh√•ller sig till varandra. Tal i br√•kform som del av helhet och del av antal. Hur delarna f√∂rh√•ller sig till helheten och till varandra samt olika s√§tt att uttrycka samma del.'
          },
          {
            title: 'Geometri',
            body: 'Grundl√§ggande geometriska objekt, till exempel fyrh√∂rninga, trianglar, cirklar, klot, koner, cylindrar och kuber samt deras inb√∂rdes relationer. Rumsuppfattning och symmetri.'
          }
        ],
        '4-6': [
          {
            title: 'Tal och algebra',
            body: 'Rationella tal och deras egenskaper samt deras anv√§ndning i vardagliga situationer. Tal i exponentialform. Metoder f√∂r ber√§kningar med naturliga tal och rationella tal - √∂verslagsr√§kning, huvudr√§kning, skriftliga metoder och minir√§knare samt deras anv√§ndning i olika situationer.'
          }
        ],
        '7-9': [
          {
            title: 'Tal och algebra',
            body: 'Reella tal och deras egenskaper samt deras anv√§ndning i vardagliga och matematiska situationer. Metoder f√∂r ber√§kningar inom aritmetiken och algebran, inklusive f√∂renkling av algebraiska uttryck. Anv√§ndning av kalkylprogram f√∂r ber√§kning och uttryck.'
          }
        ]
      },
      knowledgeRequirements: {
        '1-3': [
          {
            grade: 'E',
            body: 'Eleven kan anv√§nda naturliga tal f√∂r att ange antal och ordning. I enkla situationer kan eleven l√∂sa matematiska problem genom att v√§lja och anv√§nda n√•gon strategi med viss anpassning till problemets karakt√§r.'
          },
          {
            grade: 'C', 
            body: 'Eleven kan anv√§nda naturliga tal f√∂r att ange antal och ordning samt som tal p√• tallinjen. I bekanta situationer kan eleven l√∂sa matematiska problem genom att v√§lja och anv√§nda strategier med f√∂rh√•llandevis god anpassning till problemets karakt√§r.'
          },
          {
            grade: 'A',
            body: 'Eleven kan anv√§nda naturliga tal f√∂r att ange antal och ordning samt som tal p√• tallinjen och f√∂rst√•r tals inb√∂rdes relation. I nya situationer kan eleven l√∂sa matematiska problem genom att v√§lja och anv√§nda strategier med god anpassning till problemets karakt√§r.'
          }
        ]
      }
    },
    {
      name: 'Svenska',
      code: 'GRGRSVEA01',
      coreContent: {
        '1-3': [
          {
            title: 'L√§sa och skriva',
            body: 'L√§sstrategier f√∂r att f√∂rst√• och tolka texter fr√•n olika medier samt f√∂r att urskilja texters budskap, syfte och avs√§ndare. Strategier f√∂r att skriva olika typer av texter med anpassning till deras typiska uppbyggnad och spr√•kliga drag.'
          }
        ],
        '4-6': [
          {
            title: 'L√§sa och skriva',
            body: 'L√§sstrategier f√∂r att f√∂rst√•, tolka och analysera texter fr√•n olika medier. Syftet med att l√§sa och de olika strategiernas anv√§ndning beroende p√• det. Strategier f√∂r att skriva olika typer av texter med anpassning till deras typiska uppbyggnad och spr√•kliga drag.'
          }
        ]
      },
      knowledgeRequirements: {
        '1-3': [
          {
            grade: 'E',
            body: 'Eleven kan l√§sa bekanta och elevn√§ra texter genom att anv√§nda l√§sstrategier p√• ett i huvudsak fungerande s√§tt. Genom att svara p√• fr√•gor om och √•terber√§tta texter visar eleven grundl√§ggande l√§sf√∂rst√•else.'
          }
        ]
      }
    }
  ]
};

/**
 * Process and import curriculum data
 */
async function processCurriculumData(fresh = false) {
  console.log('üîÑ Starting curriculum data processing...');
  
  if (fresh) {
    console.log('üßπ Clearing existing knowledge base data...');
    // Clear in reverse order due to foreign keys
    await supabase.from('chunks').delete().neq('id', '00000000-0000-0000-0000-000000000000');
    await supabase.from('knowledge_requirements').delete().neq('id', '00000000-0000-0000-0000-000000000000');
    await supabase.from('core_content').delete().neq('id', '00000000-0000-0000-0000-000000000000');
    await supabase.from('source_docs').delete().neq('id', '00000000-0000-0000-0000-000000000000');
    console.log('‚úÖ Cleared existing data');
  }
  
  for (const subjectData of mockCurriculumData.subjects) {
    console.log(`üìö Processing subject: ${subjectData.name}`);
    
    // Get or create subject
    let { data: subject } = await supabase
      .from('subjects')
      .select('id')
      .eq('name', subjectData.name)
      .single();
    
    if (!subject) {
      const { data: newSubject, error } = await supabase
        .from('subjects')
        .insert({
          name: subjectData.name,
          code: subjectData.code
        })
        .select('id')
        .single();
      
      if (error) {
        console.error(`Error creating subject ${subjectData.name}:`, error);
        continue;
      }
      subject = newSubject;
    }
    
    // Create source document for this subject's curriculum
    const { data: sourceDoc, error: sourceError } = await supabase
      .from('source_docs')
      .insert({
        title: `L√§roplan ${subjectData.name} - Skolverket`,
        url: `https://www.skolverket.se/undervisning/grundskolan/laroplan-och-kursplaner-for-grundskolan/${subjectData.code?.toLowerCase()}`,
        license: 'Skolverket - Offentlig handling',
        source: 'Skolverket',
        language: 'sv',
        content_type: 'subject_plan',
        metadata: {
          subject_code: subjectData.code,
          import_date: new Date().toISOString()
        }
      })
      .select('id')
      .single();
    
    if (sourceError) {
      console.error(`Error creating source doc for ${subjectData.name}:`, sourceError);
      continue;
    }
    
    // Process core content
    for (const [gradeBand, contents] of Object.entries(subjectData.coreContent)) {
      for (const content of contents) {
        // Insert core content
        const { data: coreContent, error: contentError } = await supabase
          .from('core_content')
          .insert({
            subject_id: subject.id,
            grade_band: gradeBand,
            title: content.title,
            body: content.body,
            source_doc_id: sourceDoc.id
          })
          .select('id')
          .single();
        
        if (contentError) {
          console.error(`Error creating core content:`, contentError);
          continue;
        }
        
        // Chunk and embed the content
        const fullText = `${content.title}\n\n${content.body}`;
        const chunks = chunkText(fullText);
        
        for (const chunk of chunks) {
          const embedding = await generateEmbedding(chunk.text);
          
          await supabase.from('chunks').insert({
            source_id: sourceDoc.id,
            span_start: chunk.spanStart,
            span_end: chunk.spanEnd,
            text_content: chunk.text,
            embedding: JSON.stringify(embedding),
            token_count: Math.ceil(chunk.text.length / 4), // Rough estimate
            metadata: {
              content_type: 'core_content',
              subject: subjectData.name,
              grade_band: gradeBand,
              content_title: content.title
            }
          });
        }
      }
    }
    
    // Process knowledge requirements
    if (subjectData.knowledgeRequirements) {
      for (const [gradeBand, requirements] of Object.entries(subjectData.knowledgeRequirements)) {
        for (const req of requirements) {
          // Insert knowledge requirement
          const { error: reqError } = await supabase
            .from('knowledge_requirements')
            .insert({
              subject_id: subject.id,
              grade_band: gradeBand,
              grade_level: req.grade,
              body: req.body,
              source_doc_id: sourceDoc.id
            });
          
          if (reqError) {
            console.error(`Error creating knowledge requirement:`, reqError);
            continue;
          }
          
          // Chunk and embed the requirement
          const chunks = chunkText(req.body);
          
          for (const chunk of chunks) {
            const embedding = await generateEmbedding(chunk.text);
            
            await supabase.from('chunks').insert({
              source_id: sourceDoc.id,
              span_start: chunk.spanStart,
              span_end: chunk.spanEnd,
              text_content: chunk.text,
              embedding: JSON.stringify(embedding),
              token_count: Math.ceil(chunk.text.length / 4),
              metadata: {
                content_type: 'knowledge_requirement',
                subject: subjectData.name,
                grade_band: gradeBand,
                grade_level: req.grade
              }
            });
          }
        }
      }
    }
    
    console.log(`‚úÖ Completed processing ${subjectData.name}`);
  }
  
  console.log('üéâ ETL process completed successfully!');
}

/**
 * Display usage statistics
 */
async function showStats() {
  const { data: sourceCount } = await supabase
    .from('source_docs')
    .select('id', { count: 'exact' });
  
  const { data: chunkCount } = await supabase
    .from('chunks')
    .select('id', { count: 'exact' });
  
  const { data: subjectCount } = await supabase
    .from('subjects')
    .select('id', { count: 'exact' });
  
  console.log('\nüìä Knowledge Base Statistics:');
  console.log(`   Source Documents: ${sourceCount?.length || 0}`);
  console.log(`   Text Chunks: ${chunkCount?.length || 0}`);
  console.log(`   Subjects: ${subjectCount?.length || 0}`);
}

// Main execution
async function main() {
  const args = process.argv.slice(2);
  const fresh = args.includes('--fresh');
  
  console.log('üöÄ Starting Skolverket ETL process...');
  
  try {
    await processCurriculumData(fresh);
    await showStats();
  } catch (error) {
    console.error('‚ùå ETL process failed:', error);
    process.exit(1);
  }
}

if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}